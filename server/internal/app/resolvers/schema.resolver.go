package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"server/internal/pkg/generated"
	"server/internal/pkg/generated/models"
	"server/pkg/ogm"
)

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, name string, password string, remember *bool) (*models.Signin, error) {
	panic(fmt.Errorf("not implemented: Signin - signin"))
}

// CreateDiscord is the resolver for the createDiscord field.
func (r *mutationResolver) CreateDiscord(ctx context.Context, id string, name string) (*models.Discord, error) {
	panic(fmt.Errorf("not implemented: CreateDiscord - createDiscord"))
}

// GiveXp is the resolver for the giveXp field.
func (r *mutationResolver) GiveXp(ctx context.Context, id string, amount int) (*models.Discord, error) {
	panic(fmt.Errorf("not implemented: GiveXp - giveXp"))
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context, name string) (*models.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// Discord is the resolver for the discord field.
func (r *queryResolver) Discord(ctx context.Context, id string) (*models.Discord, error) {
	panic(fmt.Errorf("not implemented: Discord - discord"))
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, name string) (*models.Player, error) {
	o := ogm.WithPreload(ctx, r.OGM, &models.Player{})
	return o.Find(map[string]any{"name": name}, "WHERE toLower(p.name) = toLower($name)")
}

// APIKey is the resolver for the apiKey field.
func (r *queryResolver) APIKey(ctx context.Context, name string, role string) (*models.Signin, error) {
	panic(fmt.Errorf("not implemented: APIKey - apiKey"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
